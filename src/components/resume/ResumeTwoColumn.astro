---
import Avatar from '../ui/avatar.astro';
import { Github, Mail, MapPin, Phone, Linkedin, Globe, Twitter } from 'lucide-astro';

interface ContactLink {
  icon?: 'github' | 'mail' | 'phone' | 'linkedin' | 'website' | 'x';
  href: string;
  text: string;
}

interface Props {
  name: string;
  title: string;
  location: string;
  locationLink?: string;
  avatarUrl?: string;
  contacts?: ContactLink[];
}

const { name, title, location, locationLink, avatarUrl, contacts = [] }: Props = Astro.props;

const iconMap = {
  github: Github,
  mail: Mail,
  phone: Phone,
  linkedin: Linkedin,
  website: Globe,
  x: Twitter,
} as const;
---

<main class="container relative mx-auto scroll-my-12 overflow-auto p-4 print:p-2 md:p-10" id="main-content">
  <section class="mx-auto w-full max-w-4xl space-y-4 bg-white print:space-y-1.5">
    <header class="flex items-start justify-between gap-x-6 print:gap-x-4">
      <div class="flex-1 space-y-1.5">
        <h1 class="text-xl font-bold print:text-[18px]">{name}</h1>
        <p class="max-w-md text-pretty font-mono text-sm text-foreground/80 print:text-[11px]">
          {title}
        </p>
        <p class="max-w-md items-center text-pretty font-mono text-xs text-foreground">
          {locationLink ? (
            <a
              class="inline-flex gap-x-1.5 align-baseline leading-none text-foreground/80 hover:text-foreground"
              href={locationLink}
              target="_blank"
              rel="noopener noreferrer"
            >
              <MapPin class="size-3" />
              {location}
            </a>
          ) : (
            <span class="inline-flex gap-x-1.5 align-baseline leading-none text-foreground/80">
              <MapPin class="size-3" />
              {location}
            </span>
          )}
        </p>

        {contacts.length > 0 && (
          <ul class="mt-2 flex flex-wrap items-center gap-x-4 gap-y-1 font-mono text-[11px] text-foreground/80 print:gap-x-4 print:gap-y-1 print:text-[10px]">
            {contacts.map(({ icon, href, text }) => {
              const Icon = icon ? iconMap[icon] : undefined;
              return (
                <li class="flex items-center gap-x-1.5">
                  {Icon && <Icon class="size-3" />}
                  <a class="text-foreground/80 hover:text-foreground" href={href}>
                    {text}
                  </a>
                </li>
              );
            })}
          </ul>
        )}
      </div>

      {avatarUrl && (
        <Avatar
          class="h-20 w-20 md:h-24 md:w-24 print:h-20 print:w-20"
          src={avatarUrl}
          alt={`${name}'s profile picture`}
          fallback={name
            .split(' ')
            .map((part) => part[0])
            .join('')
            .slice(0, 2)}
        />
      )}
    </header>

    <div class="grid gap-3 print:gap-1.5 lg:grid-cols-[minmax(190px,1fr)_minmax(0,3fr)] print:grid-cols-[minmax(170px,1fr)_minmax(0,3fr)]">
      <div class="flex flex-col gap-3 print:gap-1.5">
        <slot name="left" />
      </div>
      <div class="flex flex-col gap-3 border-foreground/15 pl-4 print:gap-1 lg:border-l lg:border-l-2 lg:pl-6">
        <slot name="right" />
      </div>
    </div>
  </section>
</main>
